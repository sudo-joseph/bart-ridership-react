{"version":3,"sources":["components/Select/Select.js","components/Header/Header.js","components/MirroredBarChart/MirroredBarChart.js","App.js","serviceWorker.js","index.js"],"names":["Select","className","this","props","name","onChange","changeFcn","Object","entries","items","map","index","key","value","Component","Header","title","subtitle","MirroredBarChart","controls","data","yAxisLabelTop","yAxisRange","upperData","top","style","height","lowerData","bottom","yAxisLabelBottom","xAxisValue","xAxisLabel","App","state","station","year","month","dayofweek","ridershipData","arrivalData","departData","years","months","scaleFactor","stations","doFetch","fetch","headers","then","response","json","json_data","setState","ridership_data","getGraphData","updateStation","ev","target","updateYear","updateMonth","updateDayofWeek","arriving","departing","x","Math","round","reduce","o","val","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3f258d15.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './Select.css';\n\nclass Select extends Component {\n  render() {\n\n    return (\n      <div className={`Content-Dataview-Controls-${this.props.name}`} >\n        <select onChange={this.props.changeFcn}>\n          {Object.entries(this.props.items).map(([key, value],index) => (\n            <option  key={index}\n                     className=\"Content-Dataview-Controls-Option\"\n                     value= {key}> {value} </option>))}\n        </select>\n      </div>)\n  }\n}\n\nexport default Select;\n","import React, { Component } from 'react';\nimport './Header.css';\n\nclass Header extends Component {\n  render() {\n\n    return (\n      <div className=\"Header-Title\">\n        <h3> {this.props.title} </h3>\n        <h4> {this.props.subtitle}</h4>\n      </div>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\nimport './MirroredBarChart.css';\nimport Select from '../../components/Select/Select.js';\nimport Header from '../../components/Header/Header.js';\n\nclass MirroredBarChart extends Component {\n  render() {\n\n    return (\n      <div className=\"MBC\">\n        <Header\n           title={this.props.title}\n           subtitle={this.props.subtitle}/>\n        <div className=\"MBC-Dataview\">\n          <div className=\"MBC-Dataview-Controls\">\n            {this.props.controls.map((data,index) => (\n              <Select\n                name={data.name}\n                items={data.items}\n                changeFcn={data.changeFcn}\n                key={index}/>\n              ))\n            }\n          </div>\n          <div className=\"MBC-Dataview-yAxis MBC-Data-yAxis-Top\">\n            <div className=\"\">\n              &lt;\n            </div>\n            <div className=\"MBC-Dataview-yAxis-Hr\">\n              <hr />\n            </div>\n            <div>{`${this.props.yAxisLabelTop}: ${this.props.yAxisRange} Pax`} </div>\n            <div className=\"MBC-Dataview-yAxis-Hr\">\n              <hr />\n            </div>\n            <div className=\"\">\n              &gt;\n            </div>\n          </div>\n          <div className=\"MBC-Dataview-Top\">\n            {\n              this.props.upperData.map((top,index) => (\n                 <div   key={index+100}\n                        className=\"MBC-Dataview-Data-Box\"\n                        style={{height: top,}}> </div>\n                    ))\n            }\n          </div>\n          <div className=\"MBC-Dataview-Bottom\">\n            {\n              this.props.lowerData.map((bottom,index) => (\n                 <div   key={index+200}className=\"MBC-Dataview-Data-Box\"\n                        style={{height: bottom,}}></div>\n                    ))\n            }\n          </div>\n          <div className=\"MBC-Dataview-yAxis MBC-Data-yAxis-Bottom\">\n            <div className=\"\">\n              &lt;\n            </div>\n            <div className=\"MBC-Dataview-yAxis-Hr\">\n              <hr />\n            </div>\n            <div>{`${this.props.yAxisLabelBottom}: ${this.props.yAxisRange} Pax`} </div>\n            <div className=\"MBC-Dataview-yAxis-Hr\">\n              <hr />\n            </div>\n            <div className=\"\">\n              &gt;\n            </div>\n          </div>\n          <div className=\"MBC-Dataview-xAxis\">\n            {\n              this.props.xAxisValue.map((value,index) => (\n            <div key={index+300}\n              className=\"MBC-Dataview-xAxis-Box\">\n              {value}\n            </div>\n          ))}\n\n          </div>\n          <div className=\"MBC-Dataview-xLabel\">\n            {this.props.xAxisLabel}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default MirroredBarChart;\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport MirroredBarChart from './components/MirroredBarChart/MirroredBarChart.js';\n\nclass App extends Component {\n  state = {\n    station:\"12TH\",\n    year:2019,\n    month:\"Jan\",\n    dayofweek:\"weekday\",\n    ridershipData: {},\n    arrivalData:[],\n    departData:[],\n    years:[\"2019\",\"2018\",\"2017\",\"2016\",\"2015\",\"2014\",\n                 \"2015\",\"2014\",\"2013\",\"2012\",\"2011\"],\n    months:[\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n                  \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"],\n    scaleFactor:200/15000, //200px = 15000 riders.\n    yAxisRange:15000,\n    stations:{\"12TH\": \"12th Street / Oakland City Center\",\n              \"16TH\": \"16th Street Mission\",\n              \"19TH\": \"19th Street Oakland\",\n              \"24TH\": \"24th Street Mission\",\n              \"ASHB\": \"Ashby\",\n              \"BAYF\": \"Bayfair\",\n              \"DBRK\": \"Berkeley\",\n              \"BALB\": \"Balboa Park\",\n              \"CIVC\": \"Civic Center\",\n              \"COLS\": \"Coliseum\",\n              \"COLM\": \"Colma\",\n              \"CONC\": \"Concord\",\n              \"CAST\": \"Castro Valley\",\n              \"DALY\": \"Daly City\",\n              \"DUBL\": \"Dublin/Pleasanton\",\n              \"EMBR\": \"Embarcadero\",\n              \"DELN\": \"El Cerrito Del Norte\",\n              \"PLZA\": \"El Cerrito Plaza\",\n              \"FRMT\": \"Fremont\",\n              \"FTVL\": \"Fruitvale\",\n              \"GLEN\": \"Glen Park\",\n              \"HAYW\": \"Hayward\",\n              \"LAFY\": \"Lafayette\",\n              \"LAKE\": \"Lake Merritt\",\n              \"MCAR\": \"MacArthur\",\n              \"MLBR\": \"Millbrae\",\n              \"MONT\": \"Montgomery Street\",\n              \"NBRK\": \"North Berkeley\",\n              \"NCON\": \"North Concord\",\n              \"OAKL\": \"Oakland Int. Airport\",\n              \"ORIN\": \"Orinda\",\n              \"WOAK\": \"West Oakland\",\n              \"PHIL\": \"Pleasant Hill\",\n              \"POWL\": \"Powell Street\",\n              \"RICH\": \"Richmond\",\n              \"ROCK\": \"Rockridge\",\n              \"SBRN\": \"San Bruno\",\n              \"SHAY\": \"South Hayward\",\n              \"SANL\": \"San Leandro\",\n              \"SFIA\": \"San Francisco Int. Airport\",\n              \"SSAN\": \"South San Francisco\",\n              \"UCTY\": \"Union City\",\n              \"WCRK\": \"Walnut Creek\",\n              \"WDUB\": \"West Dublin/Pleasanton\",\n              \"PITT\": \"Pittsburg/Bay Point\",\n              \"WARM\": \"Warm Springs\",\n              \"ANTC\": \"Antioch\",\n              \"BERY\": \"Berryessa\",\n              \"MLPT\": \"Milpitas\",\n              \"PCTR\": \"Pittsburg Center\",\n            }\n  }\n\n  doFetch = () => {\n    fetch(\"ridership_data.json\", {\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      }\n    }).then(response => response.json()).then(json_data => {\n      this.setState({ridership_data: json_data}, this.getGraphData);\n    })\n  }\n\n   updateStation = (ev) => {\n     const value = ev.target.value;\n     this.setState({\n       station: value,\n     },this.getGraphData);\n   }\n\n   updateYear = (ev) => {\n     const value = ev.target.value;\n     this.setState({\n       year: value,\n     },this.getGraphData);\n\n   }\n\n   updateMonth = (ev) => {\n     const value = ev.target.value;\n     this.setState({\n       month: value,\n     },this.getGraphData);\n   }\n\n   updateDayofWeek = (ev) => {\n     const value = ev.target.value;\n     this.setState({\n       dayofweek: value,\n     },this.getGraphData);\n   }\n\n    componentDidMount() {\n       this.doFetch();\n    }\n\n    getGraphData = () => {\n      let arriving = this.state.ridership_data[this.state.year][this.state.month][this.state.station]['arriving'][this.state.dayofweek];\n      let departing = this.state.ridership_data[this.state.year][this.state.month][this.state.station]['departing'][this.state.dayofweek];\n      this.setState({\n        arrivalData: arriving.map(x => Math.round(x*this.state.scaleFactor)),\n        departData: departing.map(x => Math.round(x*this.state.scaleFactor))\n      })\n    }\n\n    render() {\n      return (\n          <div className=\"Page\">\n            <div className=\"Page-Header\">\n              <h1>Bart Ridership Data</h1>\n            </div>\n            <MirroredBarChart\n              title={`${this.state.stations[this.state.station]}\n                                 Station Arriving and Departing Passengers`}\n              subtitle=\"(Monthly Average Pax per Hour)\"\n              controls={[\n                          {name:\"Stations\",\n                          items:this.state.stations,\n                          changeFcn:this.updateStation,\n                          },\n                          {name:\"Year\",\n                          items:this.state.years.reduce(function(o, val) { o[val] = val; return o; }, {}),\n                          changeFcn:this.updateYear,\n                          },\n                          {name:\"Month\",\n                          items:this.state.months.reduce(function(o, val) { o[val] = val; return o; }, {}),\n                          changeFcn:this.updateMonth,\n                          },\n                          {name:\"DayofWeek\",\n                          items:{'weekday':'Weekdays','weekend':'Weekends & Holidays'},\n                          changeFcn:this.updateDayofWeek,\n                          },\n                         ]}\n              upperData={this.state.arrivalData}\n              lowerData={this.state.arrivalData}\n              xAxisValue={[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]}\n              xAxisLabel={\"(Hour of Day)\"}\n              yAxisLabelTop={\"Arrivals\"}\n              yAxisLabelBottom={\"Depatures\"}\n              scaleFactor={this.state.scaleFactor}\n              yAxisRange={this.state.yAxisRange}\n              ></MirroredBarChart>\n          </div>\n      );\n    }\n  }\n\n  export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}